class Solution:
    def trap(self, heights: 'List[int]') -> 'int':
      # go from left to right,
      # find first non 0 val as left wall
      # count up how much water is potentially trapped if we find a right side wall
      # by adding up the differences of left wall and height at i
      # if right wall found, add to sum and save locs, else discard
      # start over if right wall found

      trapping = 0
      trapping_locs = set()

      left = None
      potential_trapping = 0
      potential_trapping_locs = set()

      # not sure why iterating over ranges didnt work:
      # ranges = [range(len(heights)), range(len(heights) - 1, -1, -1)]
      # for direction in ranges:

      for i in range(len(heights)):
        height = heights[i]

        # set left if unset
        if left is None:
          if height != 0:
            left = height
          continue

        # collect potential trappings
        if height < left:
          potential_trapping += left - height
          potential_trapping_locs.add(i)
        elif height >= left:
          left = height
          # if we havent added this water, add now
          if not trapping_locs & potential_trapping_locs:
            trapping += potential_trapping
            trapping_locs.update(potential_trapping_locs)
          # reset temp counters
          potential_trapping = 0
          potential_trapping_locs = set()

      # print('trapping_locs, trapping:', trapping_locs, trapping)


      # repeat from right to left
      left = None
      potential_trapping = 0
      potential_trapping_locs = set()

      for i in range(len(heights) - 1, -1, -1):
        height = heights[i]

        # set left if unset
        if left is None:
          if height != 0:
            left = height
          continue

        # collect potential trappings
        if height < left:
          potential_trapping += left - height
          potential_trapping_locs.add(i)
        elif height >= left:
          left = height
          # if we havent added this water, add now
          if not trapping_locs & potential_trapping_locs:
            trapping += potential_trapping
            trapping_locs.update(potential_trapping_locs)
          # reset temp counters
          potential_trapping = 0
          potential_trapping_locs = set()

      # print('trapping_locs, trapping:', trapping_locs, trapping)

      return trapping



# test cases
tests = [
  ([0,1,0,2,1,0,1,3,2,1,2,1], 6),
  ([0,1,0,2,1,0,1,2,2,1,2,1], 6),
]


# main runner
sol = Solution()
for test in tests:
  print(sol.trap(test[0]) == test[1])
