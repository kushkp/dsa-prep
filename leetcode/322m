class Solution2:
    # top down approach attempt
    def coinChange(self, coins: 'List[int]', amount: 'int') -> 'int':
      cache = [amount+1]*(amount+1)
      return getMinCoins(coins, amount, cache)

    def getMinCoins2(self, coins, amount, cache):
      for coin in coins:
        new_amount = amount - coin
        if new_amount > 0:
          num_coins = getMinCoins(coins, new_amount, cache)
          cache[amount] = min(cache[amount], cache[new_amount] + 1)

      if len(args) > 0:
        min_coins = min(*args)
        return min_coins
      else:
        return -1

# how to use cache?
# how to return -1?


class Solution:
    def coinChange(self, coins: 'List[int]', amount: 'int') -> 'int':
      if amount <= 0:
        return 0

      cache = [Integer.MAX_VALUE] * (amount + 1)
      cache[0] = 0

      return self.helper(coins, amount, cache)


    def helper(self, coins, remainder, cache):
      if remainder < 0:
        return -1
      elif remainder is 0:
        return 0

      if cache[remainder] != Integer.MAX_VALUE:
        return cache[remainder]

      min_coins = Integer.MAX_VALUE
      for coin in coins:
        new_amount = remainder - coin
        if new_amount > 0:
          res = helper(coins, new_amount, cache)

          if (min_coins >= 0):
            min_coins = min(min_coins, res + 1)

      cache[remainder] = min_coins == Integer.MAX_VALUE ? -1 : min_coins

      return cache[remainder]








# test cases
s = new Solution()
print(s.coinChange([1, 2, 5], 11) == 3)
print(s.coinChange([2], 3) == -1)
print(s.coinChange([3,5], 6) == 2)
