def minimumBribes(q):
  end_num = len(q)
  total_swaps = 0
  current_map = {}

  # populate hashmap
  for pos, val in enumerate(q):
    current_map[val] = pos

  # sort array/hash
  for num in range(end_num, 1, -1):
    pos = current_map[num]

    if num - (pos+1) > 2:
      break

    swaps_needed = num - (pos+1)
    total_swaps += swaps_needed

    if swaps_needed == 1:
      q[pos] = q[pos+1]
      current_map[q[pos]] = pos

      q[pos+1] = num
      current_map[q[pos+1]] = pos+1


    elif swaps_needed == 2:
      q[pos] = q[pos+1]
      current_map[q[pos]] = pos

      q[pos+1] = q[pos+2]
      current_map[q[pos+1]] = pos+1

      q[pos+2] = num
      current_map[q[pos+2]] = pos+2

  for k, v in current_map.items():
    if k - 1 != v:
      break
  else:
    return total_swaps

  return 'Too chaotic'

# test cases
print(minimumBribes([3, 4, 5, 2, 1]) == 7)
print(minimumBribes([2, 1, 5, 3, 4]) == 3)
print(minimumBribes([2, 5, 1, 3, 4]) == 'Too chaotic')

# list(map(lambda x: x -1, q))
